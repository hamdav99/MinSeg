#include <Adafruit_MPU6050.h>

#define ENCODER_PIN_A 2
#define ENCODER_PIN_B 3
#define OUTPUT_PIN_FORWARD 4
#define OUTPUT_PIN_BACKWARD 5
#define PULSE_PER_REV 720
#define h 100

volatile int encoderPos=0;
volatile unsigned long lastPulseTime=0;
float angularVelocity = 0;

Adafruit_MPU6050 mpu;

double x1,x2,x3,x4,y,y1,y2,y3,r,r1,r2,r3,precalc1,precalc2,precalc3,precalc4;
  int u;
  int AB, ABnew;
  
double hat11 = 0.9536;
double hat12 = -3.2408;
double hat13 = 0.078;
double hat14 = -0.2936;
double hat21 = 0.0096;
double hat22 = 0.9707;
double hat23 = 0.0007;
double hat24 = -0.0026;
double hat31 = 0.6074;
double hat32 = 43.4105;
double hat33 = 0.0502;
double hat34 = 3.575;
double hat41 = 0.0053;
double hat42 = 0.3778;
double hat43 = 0.0017;
double hat44 = 1.0311;
 
double r11 = -183.3167;
double r21 = -1.5927;
double r31 = 2232.2468;
double r41 = 19.4284;
 
double L11 = 0.004;
double L21 = -0.7;
double L31 = 0.0003;
double L41 = 0;
 
double LC11 = 0;
double LC12 = 0.004;
double LC13 = 0;
double LC14 = 0;
double LC21 = 0;
double LC22 = -0.7;
double LC23 = 0;
double LC24 = 0;
double LC31 = 0;
double LC32 = 0.0003;
double LC33 = 0;
double LC34 = 0;
double LC41 = 0;
double LC42 = 0;
double LC43 = 0;
double LC44 = 0;
 
double kr11 = 950;
 
double K11 = -0.2378;
double K12 = -18.6445;
double K13 = -0.0195;
double K14 = -1.5214;

void setup() {
  // put your setup code here, to run once:
  //Deklarera alla parametrar
  Serial.begin(9600);
  pinMode(ENCODER_PIN_A,INPUT_PULLUP);
  pinMode(ENCODER_PIN_B,INPUT_PULLUP);

  attachInterrupt(digitalPinToInterrupt(ENCODER_PIN_A), hast, CHANGE);
  attachInterrupt(digitalPinToInterrupt(ENCODER_PIN_B), hast, CHANGE);
  
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setAccelerometerRange(MPU6050_RANGE_4_G);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  
  lastPulseTime = micros();

  AB=encoder();

  r=0; //Refernce value
  
  mpu.begin();
  delay(1000); //stabilaze
}

int encoder(){
  int a = digitalRead(ENCODER_PIN_A);
  int b = digitalRead(ENCODER_PIN_B);

  if(a==0 & b==0){
    return 0;
  } else if (a==0 & b==1){
    return 1;
  } else if( a==1 & b==0){
    return 2;
  } else {
    return 3;
  }
}

float hast(){

  ABnew=encoder();
  
  switch(ABnew){
    case 0: if(AB==2) encoderPos++; else encoderPos--; break;
    case 1: if(AB==0) encoderPos++; else encoderPos--; break;
    case 2: if(AB==3) encoderPos++; else encoderPos--; break;
    case 3: if(AB==1) encoderPos++; else encoderPos--; break;
  }

   AB=ABnew;
}

double limit(double value, int uppLim, int lowLim){
  if(value>uppLim){
    value=uppLim;
  } else if(value<lowLim){
    value=lowLim;
  }
  return value;
}

void loop() {

long time = millis();

//Nya värden
sensors_event_t accel, gyro; 
mpu.getAccelerometerSensor()->getEvent(&accel);
mpu.getGyroSensor()->getEvent(&gyro);
float pitch = atan2(accel.acceleration.z, -accel.acceleration.y);//y2
float pitchspeed = gyro.gyro.z; //y1
float angle = 2 * 3.142 * encoderPos/PULSE_PER_REV; // mod360? Bryr vi oss om det är över 360 grader?
//y3

/*y1=pitchspeed;
y2=pitch;
y3=angle;*/

y=pitch;

/*Serial.print("y1/pitchspeed: ");
Serial.println(pitchspeed);  
Serial.print("y2/pitch: ");
Serial.println(pitch);
Serial.print("y3/angle: ");
Serial.println(angle); 
Serial.println(); */

//Beräkningar med nya värden
x1 = r11*r + L11*y + precalc1; 
x2 = r21*r + L21*y + precalc2;
x3 = r31*r + L31*y + precalc3;
x4 = r41*r + L41*y + precalc4;
u = kr11*r - K11*x1 - K12*x2 - K13*x3 - K14*x4;

x1 = limit(x1,10000,-10000);
x2 = limit(x2,10000,-10000);
x3 = limit(x3,10000,-10000);
x4 = limit(x4,10000,-10000);
u = limit(u, 255, -255);

Serial.println(x1);
Serial.println(x2);
Serial.println(x3);
Serial.println(x4);
Serial.println(u);
Serial.println();

//Output
if(u > 0){
  analogWrite(OUTPUT_PIN_FORWARD,255-u); //Under antagandet att regulatorn tror att 255 är max och för motorn är det 0
  analogWrite(OUTPUT_PIN_BACKWARD,255);
} else {
  analogWrite(OUTPUT_PIN_FORWARD,255);
  analogWrite(OUTPUT_PIN_BACKWARD,255+u);
}


//Precalc
precalc1 = hat11*x1 + hat12*x2 + hat13*x3 + hat14*x4 - LC11*x1 - LC12*x2 - LC13*x3 - LC14*x4; 
precalc2 = hat21*x1 + hat22*x2 + hat23*x3 + hat24*x4 - LC21*x1 - LC22*x2 - LC23*x3 - LC24*x4;
precalc3 = hat31*x1 + hat32*x2 + hat33*x3 + hat34*x4 - LC31*x1 - LC32*x2 - LC33*x3 - LC34*x4;
precalc4 = hat41*x1 + hat42*x2 + hat43*x3 + hat44*x4 - LC41*x1 - LC42*x2 - LC43*x3 - LC44*x4;


//Waitunitl
time = time + h;
float duration = time - millis();
delay(duration);
}
